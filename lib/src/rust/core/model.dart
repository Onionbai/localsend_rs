// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'model.freezed.dart';

class DeviceInfo {
  final String alias;
  final String version;
  final String deviceModel;
  final String deviceType;
  final String fingerprint;
  final String? address;
  final int port;
  final String protocol;
  final bool download;
  final bool announcement;
  final bool announce;

  const DeviceInfo({
    required this.alias,
    required this.version,
    required this.deviceModel,
    required this.deviceType,
    required this.fingerprint,
    this.address,
    required this.port,
    required this.protocol,
    required this.download,
    required this.announcement,
    required this.announce,
  });

  @override
  int get hashCode =>
      alias.hashCode ^
      version.hashCode ^
      deviceModel.hashCode ^
      deviceType.hashCode ^
      fingerprint.hashCode ^
      address.hashCode ^
      port.hashCode ^
      protocol.hashCode ^
      download.hashCode ^
      announcement.hashCode ^
      announce.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is DeviceInfo &&
          runtimeType == other.runtimeType &&
          alias == other.alias &&
          version == other.version &&
          deviceModel == other.deviceModel &&
          deviceType == other.deviceType &&
          fingerprint == other.fingerprint &&
          address == other.address &&
          port == other.port &&
          protocol == other.protocol &&
          download == other.download &&
          announcement == other.announcement &&
          announce == other.announce;
}

@freezed
sealed class Progress with _$Progress {
  const factory Progress.idle() = Progress_Idle;
  const factory Progress.progress(
    int field0,
    int field1,
  ) = Progress_Progress;
  const factory Progress.done() = Progress_Done;
}
