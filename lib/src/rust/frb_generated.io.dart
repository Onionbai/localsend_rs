// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/simple.dart';
import 'core/model.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  DeviceConfig dco_decode_box_autoadd_device_config(dynamic raw);

  @protected
  ServerConfig dco_decode_box_autoadd_server_config(dynamic raw);

  @protected
  DeviceConfig dco_decode_device_config(dynamic raw);

  @protected
  DeviceInfo dco_decode_device_info(dynamic raw);

  @protected
  DiscoverState dco_decode_discover_state(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  List<DeviceInfo> dco_decode_list_device_info(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Progress dco_decode_progress(dynamic raw);

  @protected
  ServerConfig dco_decode_server_config(dynamic raw);

  @protected
  ServerStatus dco_decode_server_status(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  DeviceConfig sse_decode_box_autoadd_device_config(
      SseDeserializer deserializer);

  @protected
  ServerConfig sse_decode_box_autoadd_server_config(
      SseDeserializer deserializer);

  @protected
  DeviceConfig sse_decode_device_config(SseDeserializer deserializer);

  @protected
  DeviceInfo sse_decode_device_info(SseDeserializer deserializer);

  @protected
  DiscoverState sse_decode_discover_state(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<DeviceInfo> sse_decode_list_device_info(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Progress sse_decode_progress(SseDeserializer deserializer);

  @protected
  ServerConfig sse_decode_server_config(SseDeserializer deserializer);

  @protected
  ServerStatus sse_decode_server_status(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_device_config> cst_encode_box_autoadd_device_config(
      DeviceConfig raw) {
    final ptr = wire.cst_new_box_autoadd_device_config();
    cst_api_fill_to_wire_device_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_server_config> cst_encode_box_autoadd_server_config(
      ServerConfig raw) {
    final ptr = wire.cst_new_box_autoadd_server_config();
    cst_api_fill_to_wire_server_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  int cst_encode_i_64(int raw) {
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_device_info> cst_encode_list_device_info(
      List<DeviceInfo> raw) {
    final ans = wire.cst_new_list_device_info(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_device_info(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_list_prim_u_8(Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_device_config(
      DeviceConfig apiObj, ffi.Pointer<wire_cst_device_config> wireObj) {
    cst_api_fill_to_wire_device_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_server_config(
      ServerConfig apiObj, ffi.Pointer<wire_cst_server_config> wireObj) {
    cst_api_fill_to_wire_server_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_device_config(
      DeviceConfig apiObj, wire_cst_device_config wireObj) {
    wireObj.alias = cst_encode_String(apiObj.alias);
    wireObj.fingerprint = cst_encode_String(apiObj.fingerprint);
    wireObj.device_model = cst_encode_String(apiObj.deviceModel);
    wireObj.device_type = cst_encode_String(apiObj.deviceType);
    wireObj.store_path = cst_encode_String(apiObj.storePath);
  }

  @protected
  void cst_api_fill_to_wire_device_info(
      DeviceInfo apiObj, wire_cst_device_info wireObj) {
    wireObj.alias = cst_encode_String(apiObj.alias);
    wireObj.version = cst_encode_String(apiObj.version);
    wireObj.device_model = cst_encode_String(apiObj.deviceModel);
    wireObj.device_type = cst_encode_String(apiObj.deviceType);
    wireObj.fingerprint = cst_encode_String(apiObj.fingerprint);
    wireObj.address = cst_encode_opt_String(apiObj.address);
    wireObj.port = cst_encode_u_16(apiObj.port);
    wireObj.protocol = cst_encode_String(apiObj.protocol);
    wireObj.download = cst_encode_bool(apiObj.download);
    wireObj.announcement = cst_encode_bool(apiObj.announcement);
    wireObj.announce = cst_encode_bool(apiObj.announce);
  }

  @protected
  void cst_api_fill_to_wire_discover_state(
      DiscoverState apiObj, wire_cst_discover_state wireObj) {
    if (apiObj is DiscoverState_Discovering) {
      var pre_field0 = cst_encode_list_device_info(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = wire.cst_inflate_DiscoverState_Discovering();
      wireObj.kind.ref.Discovering.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DiscoverState_Done) {
      wireObj.tag = 1;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_log_entry(
      LogEntry apiObj, wire_cst_log_entry wireObj) {
    wireObj.time_millis = cst_encode_i_64(apiObj.timeMillis);
    wireObj.level = cst_encode_i_32(apiObj.level);
    wireObj.tag = cst_encode_String(apiObj.tag);
    wireObj.msg = cst_encode_String(apiObj.msg);
  }

  @protected
  void cst_api_fill_to_wire_progress(
      Progress apiObj, wire_cst_progress wireObj) {
    if (apiObj is Progress_Prepare) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Progress_Idle) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is Progress_Progress) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind = wire.cst_inflate_Progress_Progress();
      wireObj.kind.ref.Progress.ref.field0 = pre_field0;
      wireObj.kind.ref.Progress.ref.field1 = pre_field1;
      return;
    }
    if (apiObj is Progress_Done) {
      wireObj.tag = 3;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_server_config(
      ServerConfig apiObj, wire_cst_server_config wireObj) {
    wireObj.multicast_addr = cst_encode_String(apiObj.multicastAddr);
    wireObj.port = cst_encode_u_16(apiObj.port);
    wireObj.protocol = cst_encode_String(apiObj.protocol);
    wireObj.download = cst_encode_bool(apiObj.download);
    wireObj.announcement = cst_encode_bool(apiObj.announcement);
    wireObj.announce = cst_encode_bool(apiObj.announce);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_server_status(ServerStatus raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_device_config(
      DeviceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_server_config(
      ServerConfig self, SseSerializer serializer);

  @protected
  void sse_encode_device_config(DeviceConfig self, SseSerializer serializer);

  @protected
  void sse_encode_device_info(DeviceInfo self, SseSerializer serializer);

  @protected
  void sse_encode_discover_state(DiscoverState self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_device_info(
      List<DeviceInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_progress(Progress self, SseSerializer serializer);

  @protected
  void sse_encode_server_config(ServerConfig self, SseSerializer serializer);

  @protected
  void sse_encode_server_status(ServerStatus self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void wire_accept(
    int port_,
    bool is_accept,
  ) {
    return _wire_accept(
      port_,
      is_accept,
    );
  }

  late final _wire_acceptPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_accept');
  late final _wire_accept =
      _wire_acceptPtr.asFunction<void Function(int, bool)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_log_stream');
  late final _wire_create_log_stream =
      _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_discover(
    int port_,
  ) {
    return _wire_discover(
      port_,
    );
  }

  late final _wire_discoverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_discover');
  late final _wire_discover =
      _wire_discoverPtr.asFunction<void Function(int)>();

  void wire_init_server(
    int port_,
    ffi.Pointer<wire_cst_device_config> device,
  ) {
    return _wire_init_server(
      port_,
      device,
    );
  }

  late final _wire_init_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_cst_device_config>)>>('wire_init_server');
  late final _wire_init_server = _wire_init_serverPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_device_config>)>();

  void wire_listen_discover(
    int port_,
  ) {
    return _wire_listen_discover(
      port_,
    );
  }

  late final _wire_listen_discoverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_listen_discover');
  late final _wire_listen_discover =
      _wire_listen_discoverPtr.asFunction<void Function(int)>();

  void wire_listen_progress(
    int port_,
  ) {
    return _wire_listen_progress(
      port_,
    );
  }

  late final _wire_listen_progressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_listen_progress');
  late final _wire_listen_progress =
      _wire_listen_progressPtr.asFunction<void Function(int)>();

  void wire_rust_set_up(
    int port_,
    bool isDebug,
  ) {
    return _wire_rust_set_up(
      port_,
      isDebug,
    );
  }

  late final _wire_rust_set_upPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_rust_set_up');
  late final _wire_rust_set_up =
      _wire_rust_set_upPtr.asFunction<void Function(int, bool)>();

  void wire_server_status(
    int port_,
  ) {
    return _wire_server_status(
      port_,
    );
  }

  late final _wire_server_statusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_server_status');
  late final _wire_server_status =
      _wire_server_statusPtr.asFunction<void Function(int)>();

  void wire_start_server(
    int port_,
    ffi.Pointer<wire_cst_server_config> config,
  ) {
    return _wire_start_server(
      port_,
      config,
    );
  }

  late final _wire_start_serverPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_cst_server_config>)>>('wire_start_server');
  late final _wire_start_server = _wire_start_serverPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_server_config>)>();

  void wire_stop_server(
    int port_,
  ) {
    return _wire_stop_server(
      port_,
    );
  }

  late final _wire_stop_serverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_stop_server');
  late final _wire_stop_server =
      _wire_stop_serverPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_cst_device_config> cst_new_box_autoadd_device_config() {
    return _cst_new_box_autoadd_device_config();
  }

  late final _cst_new_box_autoadd_device_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_device_config> Function()>>(
      'cst_new_box_autoadd_device_config');
  late final _cst_new_box_autoadd_device_config =
      _cst_new_box_autoadd_device_configPtr
          .asFunction<ffi.Pointer<wire_cst_device_config> Function()>();

  ffi.Pointer<wire_cst_server_config> cst_new_box_autoadd_server_config() {
    return _cst_new_box_autoadd_server_config();
  }

  late final _cst_new_box_autoadd_server_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_server_config> Function()>>(
      'cst_new_box_autoadd_server_config');
  late final _cst_new_box_autoadd_server_config =
      _cst_new_box_autoadd_server_configPtr
          .asFunction<ffi.Pointer<wire_cst_server_config> Function()>();

  ffi.Pointer<wire_cst_list_device_info> cst_new_list_device_info(
    int len,
  ) {
    return _cst_new_list_device_info(
      len,
    );
  }

  late final _cst_new_list_device_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_device_info> Function(
              ffi.Int32)>>('cst_new_list_device_info');
  late final _cst_new_list_device_info = _cst_new_list_device_infoPtr
      .asFunction<ffi.Pointer<wire_cst_list_device_info> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8> cst_new_list_prim_u_8(
    int len,
  ) {
    return _cst_new_list_prim_u_8(
      len,
    );
  }

  late final _cst_new_list_prim_u_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8> Function(
              ffi.Int32)>>('cst_new_list_prim_u_8');
  late final _cst_new_list_prim_u_8 = _cst_new_list_prim_u_8Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8> Function(int)>();

  ffi.Pointer<DiscoverStateKind> cst_inflate_DiscoverState_Discovering() {
    return _cst_inflate_DiscoverState_Discovering();
  }

  late final _cst_inflate_DiscoverState_DiscoveringPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DiscoverStateKind> Function()>>(
          'cst_inflate_DiscoverState_Discovering');
  late final _cst_inflate_DiscoverState_Discovering =
      _cst_inflate_DiscoverState_DiscoveringPtr
          .asFunction<ffi.Pointer<DiscoverStateKind> Function()>();

  ffi.Pointer<ProgressKind> cst_inflate_Progress_Progress() {
    return _cst_inflate_Progress_Progress();
  }

  late final _cst_inflate_Progress_ProgressPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ProgressKind> Function()>>(
          'cst_inflate_Progress_Progress');
  late final _cst_inflate_Progress_Progress = _cst_inflate_Progress_ProgressPtr
      .asFunction<ffi.Pointer<ProgressKind> Function()>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_device_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> alias;

  external ffi.Pointer<wire_cst_list_prim_u_8> fingerprint;

  external ffi.Pointer<wire_cst_list_prim_u_8> device_model;

  external ffi.Pointer<wire_cst_list_prim_u_8> device_type;

  external ffi.Pointer<wire_cst_list_prim_u_8> store_path;
}

final class wire_cst_server_config extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> multicast_addr;

  @ffi.Uint16()
  external int port;

  external ffi.Pointer<wire_cst_list_prim_u_8> protocol;

  @ffi.Bool()
  external bool download;

  @ffi.Bool()
  external bool announcement;

  @ffi.Bool()
  external bool announce;
}

final class wire_cst_device_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> alias;

  external ffi.Pointer<wire_cst_list_prim_u_8> version;

  external ffi.Pointer<wire_cst_list_prim_u_8> device_model;

  external ffi.Pointer<wire_cst_list_prim_u_8> device_type;

  external ffi.Pointer<wire_cst_list_prim_u_8> fingerprint;

  external ffi.Pointer<wire_cst_list_prim_u_8> address;

  @ffi.Uint16()
  external int port;

  external ffi.Pointer<wire_cst_list_prim_u_8> protocol;

  @ffi.Bool()
  external bool download;

  @ffi.Bool()
  external bool announcement;

  @ffi.Bool()
  external bool announce;
}

final class wire_cst_list_device_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_device_info> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_DiscoverState_Discovering extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_device_info> field0;
}

final class wire_cst_DiscoverState_Done extends ffi.Opaque {}

final class DiscoverStateKind extends ffi.Union {
  external ffi.Pointer<wire_cst_DiscoverState_Discovering> Discovering;

  external ffi.Pointer<wire_cst_DiscoverState_Done> Done;
}

final class wire_cst_Progress_Prepare extends ffi.Opaque {}

final class wire_cst_Progress_Idle extends ffi.Opaque {}

final class wire_cst_Progress_Progress extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;

  @ffi.UintPtr()
  external int field1;
}

final class wire_cst_Progress_Done extends ffi.Opaque {}

final class ProgressKind extends ffi.Union {
  external ffi.Pointer<wire_cst_Progress_Prepare> Prepare;

  external ffi.Pointer<wire_cst_Progress_Idle> Idle;

  external ffi.Pointer<wire_cst_Progress_Progress> Progress;

  external ffi.Pointer<wire_cst_Progress_Done> Done;
}

final class wire_cst_discover_state extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DiscoverStateKind> kind;
}

final class wire_cst_log_entry extends ffi.Struct {
  @ffi.Int64()
  external int time_millis;

  @ffi.Int32()
  external int level;

  external ffi.Pointer<wire_cst_list_prim_u_8> tag;

  external ffi.Pointer<wire_cst_list_prim_u_8> msg;
}

final class wire_cst_progress extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<ProgressKind> kind;
}
