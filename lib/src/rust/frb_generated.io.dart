// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/model.dart';
import 'bridge/bridge.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'discovery/model.dart';
import 'frb_generated.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  FileInfo dco_decode_file_info(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  List<FileInfo> dco_decode_list_file_info(dynamic raw);

  @protected
  List<Node> dco_decode_list_node(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  MissionItem dco_decode_mission_item(dynamic raw);

  @protected
  Node dco_decode_node(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  FileInfo sse_decode_file_info(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<FileInfo> sse_decode_list_file_info(SseDeserializer deserializer);

  @protected
  List<Node> sse_decode_list_node(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  MissionItem sse_decode_mission_item(SseDeserializer deserializer);

  @protected
  Node sse_decode_node(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_String(String raw) {
    return cst_encode_list_prim_u_8(utf8.encoder.convert(raw));
  }

  @protected
  int cst_encode_i_64(int raw) {
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_file_info> cst_encode_list_file_info(
      List<FileInfo> raw) {
    final ans = wire.cst_new_list_file_info(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_file_info(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_node> cst_encode_list_node(List<Node> raw) {
    final ans = wire.cst_new_list_node(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_node(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_list_prim_u_8(Uint8List raw) {
    final ans = wire.cst_new_list_prim_u_8(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8> cst_encode_opt_list_prim_u_8(
      Uint8List? raw) {
    return raw == null ? ffi.nullptr : cst_encode_list_prim_u_8(raw);
  }

  @protected
  void cst_api_fill_to_wire_file_info(
      FileInfo apiObj, wire_cst_file_info wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.file_name = cst_encode_String(apiObj.fileName);
    wireObj.size = cst_encode_i_64(apiObj.size);
    wireObj.file_type = cst_encode_String(apiObj.fileType);
    wireObj.sha256 = cst_encode_opt_String(apiObj.sha256);
    wireObj.preview = cst_encode_opt_list_prim_u_8(apiObj.preview);
  }

  @protected
  void cst_api_fill_to_wire_log_entry(
      LogEntry apiObj, wire_cst_log_entry wireObj) {
    wireObj.time_millis = cst_encode_i_64(apiObj.timeMillis);
    wireObj.level = cst_encode_i_32(apiObj.level);
    wireObj.tag = cst_encode_String(apiObj.tag);
    wireObj.msg = cst_encode_String(apiObj.msg);
  }

  @protected
  void cst_api_fill_to_wire_mission_item(
      MissionItem apiObj, wire_cst_mission_item wireObj) {
    wireObj.id = cst_encode_String(apiObj.id);
    wireObj.file_info = cst_encode_list_file_info(apiObj.fileInfo);
  }

  @protected
  void cst_api_fill_to_wire_node(Node apiObj, wire_cst_node wireObj) {
    wireObj.alias = cst_encode_String(apiObj.alias);
    wireObj.version = cst_encode_String(apiObj.version);
    wireObj.device_model = cst_encode_String(apiObj.deviceModel);
    wireObj.device_type = cst_encode_String(apiObj.deviceType);
    wireObj.fingerprint = cst_encode_String(apiObj.fingerprint);
    wireObj.address = cst_encode_String(apiObj.address);
    wireObj.port = cst_encode_u_16(apiObj.port);
    wireObj.protocol = cst_encode_String(apiObj.protocol);
    wireObj.download = cst_encode_bool(apiObj.download);
    wireObj.announcement = cst_encode_bool(apiObj.announcement);
    wireObj.announce = cst_encode_bool(apiObj.announce);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_file_info(FileInfo self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_file_info(List<FileInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_node(List<Node> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_mission_item(MissionItem self, SseSerializer serializer);

  @protected
  void sse_encode_node(Node self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_8(Uint8List? self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustLibWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void dart_fn_deliver_output(
    int call_id,
    ffi.Pointer<ffi.Uint8> ptr_,
    int rust_vec_len_,
    int data_len_,
  ) {
    return _dart_fn_deliver_output(
      call_id,
      ptr_,
      rust_vec_len_,
      data_len_,
    );
  }

  late final _dart_fn_deliver_outputPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32,
              ffi.Int32)>>('dart_fn_deliver_output');
  late final _dart_fn_deliver_output = _dart_fn_deliver_outputPtr
      .asFunction<void Function(int, ffi.Pointer<ffi.Uint8>, int, int)>();

  void wire_accept_mission(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8> mission_id,
    bool accept,
  ) {
    return _wire_accept_mission(
      port_,
      mission_id,
      accept,
    );
  }

  late final _wire_accept_missionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8>,
              ffi.Bool)>>('wire_accept_mission');
  late final _wire_accept_mission = _wire_accept_missionPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8>, bool)>();

  void wire_create_log_stream(
    int port_,
  ) {
    return _wire_create_log_stream(
      port_,
    );
  }

  late final _wire_create_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_create_log_stream');
  late final _wire_create_log_stream =
      _wire_create_log_streamPtr.asFunction<void Function(int)>();

  void wire_discover(
    int port_,
  ) {
    return _wire_discover(
      port_,
    );
  }

  late final _wire_discoverPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_discover');
  late final _wire_discover =
      _wire_discoverPtr.asFunction<void Function(int)>();

  void wire_mission_channel(
    int port_,
  ) {
    return _wire_mission_channel(
      port_,
    );
  }

  late final _wire_mission_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_mission_channel');
  late final _wire_mission_channel =
      _wire_mission_channelPtr.asFunction<void Function(int)>();

  void wire_node_channel(
    int port_,
  ) {
    return _wire_node_channel(
      port_,
    );
  }

  late final _wire_node_channelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_node_channel');
  late final _wire_node_channel =
      _wire_node_channelPtr.asFunction<void Function(int)>();

  void wire_rust_set_up(
    int port_,
    bool is_debug,
  ) {
    return _wire_rust_set_up(
      port_,
      is_debug,
    );
  }

  late final _wire_rust_set_upPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Bool)>>(
          'wire_rust_set_up');
  late final _wire_rust_set_up =
      _wire_rust_set_upPtr.asFunction<void Function(int, bool)>();

  void wire_setup(
    int port_,
  ) {
    return _wire_setup(
      port_,
    );
  }

  late final _wire_setupPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_setup');
  late final _wire_setup = _wire_setupPtr.asFunction<void Function(int)>();

  void wire_start(
    int port_,
  ) {
    return _wire_start(
      port_,
    );
  }

  late final _wire_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_start');
  late final _wire_start = _wire_startPtr.asFunction<void Function(int)>();

  void wire_stop(
    int port_,
  ) {
    return _wire_stop(
      port_,
    );
  }

  late final _wire_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_stop');
  late final _wire_stop = _wire_stopPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_cst_list_file_info> cst_new_list_file_info(
    int len,
  ) {
    return _cst_new_list_file_info(
      len,
    );
  }

  late final _cst_new_list_file_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_file_info> Function(
              ffi.Int32)>>('cst_new_list_file_info');
  late final _cst_new_list_file_info = _cst_new_list_file_infoPtr
      .asFunction<ffi.Pointer<wire_cst_list_file_info> Function(int)>();

  ffi.Pointer<wire_cst_list_node> cst_new_list_node(
    int len,
  ) {
    return _cst_new_list_node(
      len,
    );
  }

  late final _cst_new_list_nodePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_list_node> Function(ffi.Int32)>>(
      'cst_new_list_node');
  late final _cst_new_list_node = _cst_new_list_nodePtr
      .asFunction<ffi.Pointer<wire_cst_list_node> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8> cst_new_list_prim_u_8(
    int len,
  ) {
    return _cst_new_list_prim_u_8(
      len,
    );
  }

  late final _cst_new_list_prim_u_8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8> Function(
              ffi.Int32)>>('cst_new_list_prim_u_8');
  late final _cst_new_list_prim_u_8 = _cst_new_list_prim_u_8Ptr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

final class wire_cst_list_prim_u_8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_file_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> id;

  external ffi.Pointer<wire_cst_list_prim_u_8> file_name;

  @ffi.Int64()
  external int size;

  external ffi.Pointer<wire_cst_list_prim_u_8> file_type;

  external ffi.Pointer<wire_cst_list_prim_u_8> sha256;

  external ffi.Pointer<wire_cst_list_prim_u_8> preview;
}

final class wire_cst_list_file_info extends ffi.Struct {
  external ffi.Pointer<wire_cst_file_info> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_node extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> alias;

  external ffi.Pointer<wire_cst_list_prim_u_8> version;

  external ffi.Pointer<wire_cst_list_prim_u_8> device_model;

  external ffi.Pointer<wire_cst_list_prim_u_8> device_type;

  external ffi.Pointer<wire_cst_list_prim_u_8> fingerprint;

  external ffi.Pointer<wire_cst_list_prim_u_8> address;

  @ffi.Uint16()
  external int port;

  external ffi.Pointer<wire_cst_list_prim_u_8> protocol;

  @ffi.Bool()
  external bool download;

  @ffi.Bool()
  external bool announcement;

  @ffi.Bool()
  external bool announce;
}

final class wire_cst_list_node extends ffi.Struct {
  external ffi.Pointer<wire_cst_node> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_log_entry extends ffi.Struct {
  @ffi.Int64()
  external int time_millis;

  @ffi.Int32()
  external int level;

  external ffi.Pointer<wire_cst_list_prim_u_8> tag;

  external ffi.Pointer<wire_cst_list_prim_u_8> msg;
}

final class wire_cst_mission_item extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8> id;

  external ffi.Pointer<wire_cst_list_file_info> file_info;
}
