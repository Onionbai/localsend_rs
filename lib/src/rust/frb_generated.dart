// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/simple.dart';
import 'core/model.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> accept({required bool isAccept, dynamic hint});

  Stream<LogEntry> createLogStream({dynamic hint});

  Future<void> discover({dynamic hint});

  Future<void> initServer({required DeviceConfig device, dynamic hint});

  Stream<DiscoverState> listenDiscover({dynamic hint});

  Stream<Progress> listenProgress({dynamic hint});

  Future<void> rustSetUp({required bool isDebug, dynamic hint});

  Stream<ServerStatus> serverStatus({dynamic hint});

  Future<void> startServer({required ServerConfig config, dynamic hint});

  Future<void> stopServer({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> accept({required bool isAccept, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(isAccept);
        return wire.wire_accept(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAcceptConstMeta,
      argValues: [isAccept],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAcceptConstMeta => const TaskConstMeta(
        debugName: "accept",
        argNames: ["isAccept"],
      );

  @override
  Stream<LogEntry> createLogStream({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_create_log_stream(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_log_entry,
        decodeErrorData: dco_decode_String,
      ),
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  @override
  Future<void> discover({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_discover(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDiscoverConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDiscoverConstMeta => const TaskConstMeta(
        debugName: "discover",
        argNames: [],
      );

  @override
  Future<void> initServer({required DeviceConfig device, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_device_config(device);
        return wire.wire_init_server(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kInitServerConstMeta,
      argValues: [device],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kInitServerConstMeta => const TaskConstMeta(
        debugName: "init_server",
        argNames: ["device"],
      );

  @override
  Stream<DiscoverState> listenDiscover({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_listen_discover(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_discover_state,
        decodeErrorData: null,
      ),
      constMeta: kListenDiscoverConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListenDiscoverConstMeta => const TaskConstMeta(
        debugName: "listen_discover",
        argNames: [],
      );

  @override
  Stream<Progress> listenProgress({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_listen_progress(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_progress,
        decodeErrorData: null,
      ),
      constMeta: kListenProgressConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kListenProgressConstMeta => const TaskConstMeta(
        debugName: "listen_progress",
        argNames: [],
      );

  @override
  Future<void> rustSetUp({required bool isDebug, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(isDebug);
        return wire.wire_rust_set_up(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustSetUpConstMeta,
      argValues: [isDebug],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: ["isDebug"],
      );

  @override
  Stream<ServerStatus> serverStatus({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_server_status(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_server_status,
        decodeErrorData: null,
      ),
      constMeta: kServerStatusConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kServerStatusConstMeta => const TaskConstMeta(
        debugName: "server_status",
        argNames: [],
      );

  @override
  Future<void> startServer({required ServerConfig config, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_server_config(config);
        return wire.wire_start_server(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStartServerConstMeta,
      argValues: [config],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStartServerConstMeta => const TaskConstMeta(
        debugName: "start_server",
        argNames: ["config"],
      );

  @override
  Future<void> stopServer({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_stop_server(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStopServerConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStopServerConstMeta => const TaskConstMeta(
        debugName: "stop_server",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  DeviceConfig dco_decode_box_autoadd_device_config(dynamic raw) {
    return dco_decode_device_config(raw);
  }

  @protected
  ServerConfig dco_decode_box_autoadd_server_config(dynamic raw) {
    return dco_decode_server_config(raw);
  }

  @protected
  DeviceConfig dco_decode_device_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5)
      throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return DeviceConfig(
      alias: dco_decode_String(arr[0]),
      fingerprint: dco_decode_String(arr[1]),
      deviceModel: dco_decode_String(arr[2]),
      deviceType: dco_decode_String(arr[3]),
      storePath: dco_decode_String(arr[4]),
    );
  }

  @protected
  DeviceInfo dco_decode_device_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return DeviceInfo(
      alias: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
      deviceModel: dco_decode_String(arr[2]),
      deviceType: dco_decode_String(arr[3]),
      fingerprint: dco_decode_String(arr[4]),
      address: dco_decode_opt_String(arr[5]),
      port: dco_decode_u_16(arr[6]),
      protocol: dco_decode_String(arr[7]),
      download: dco_decode_bool(arr[8]),
      announcement: dco_decode_bool(arr[9]),
      announce: dco_decode_bool(arr[10]),
    );
  }

  @protected
  DiscoverState dco_decode_discover_state(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return DiscoverState_Discovering(
          dco_decode_list_device_info(raw[1]),
        );
      case 1:
        return DiscoverState_Done();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<DeviceInfo> dco_decode_list_device_info(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_device_info).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_i_32(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Progress dco_decode_progress(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Progress_Prepare();
      case 1:
        return Progress_Idle();
      case 2:
        return Progress_Progress(
          dco_decode_usize(raw[1]),
          dco_decode_usize(raw[2]),
        );
      case 3:
        return Progress_Done();
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ServerConfig dco_decode_server_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ServerConfig(
      multicastAddr: dco_decode_String(arr[0]),
      port: dco_decode_u_16(arr[1]),
      protocol: dco_decode_String(arr[2]),
      download: dco_decode_bool(arr[3]),
      announcement: dco_decode_bool(arr[4]),
      announce: dco_decode_bool(arr[5]),
    );
  }

  @protected
  ServerStatus dco_decode_server_status(dynamic raw) {
    return ServerStatus.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  DeviceConfig sse_decode_box_autoadd_device_config(
      SseDeserializer deserializer) {
    return (sse_decode_device_config(deserializer));
  }

  @protected
  ServerConfig sse_decode_box_autoadd_server_config(
      SseDeserializer deserializer) {
    return (sse_decode_server_config(deserializer));
  }

  @protected
  DeviceConfig sse_decode_device_config(SseDeserializer deserializer) {
    var var_alias = sse_decode_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    var var_deviceModel = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_String(deserializer);
    var var_storePath = sse_decode_String(deserializer);
    return DeviceConfig(
        alias: var_alias,
        fingerprint: var_fingerprint,
        deviceModel: var_deviceModel,
        deviceType: var_deviceType,
        storePath: var_storePath);
  }

  @protected
  DeviceInfo sse_decode_device_info(SseDeserializer deserializer) {
    var var_alias = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_deviceModel = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    var var_address = sse_decode_opt_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_protocol = sse_decode_String(deserializer);
    var var_download = sse_decode_bool(deserializer);
    var var_announcement = sse_decode_bool(deserializer);
    var var_announce = sse_decode_bool(deserializer);
    return DeviceInfo(
        alias: var_alias,
        version: var_version,
        deviceModel: var_deviceModel,
        deviceType: var_deviceType,
        fingerprint: var_fingerprint,
        address: var_address,
        port: var_port,
        protocol: var_protocol,
        download: var_download,
        announcement: var_announcement,
        announce: var_announce);
  }

  @protected
  DiscoverState sse_decode_discover_state(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_list_device_info(deserializer);
        return DiscoverState_Discovering(var_field0);
      case 1:
        return DiscoverState_Done();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  List<DeviceInfo> sse_decode_list_device_info(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <DeviceInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_device_info(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_i_32(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Progress sse_decode_progress(SseDeserializer deserializer) {
    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        return Progress_Prepare();
      case 1:
        return Progress_Idle();
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        var var_field1 = sse_decode_usize(deserializer);
        return Progress_Progress(var_field0, var_field1);
      case 3:
        return Progress_Done();
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ServerConfig sse_decode_server_config(SseDeserializer deserializer) {
    var var_multicastAddr = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_protocol = sse_decode_String(deserializer);
    var var_download = sse_decode_bool(deserializer);
    var var_announcement = sse_decode_bool(deserializer);
    var var_announce = sse_decode_bool(deserializer);
    return ServerConfig(
        multicastAddr: var_multicastAddr,
        port: var_port,
        protocol: var_protocol,
        download: var_download,
        announcement: var_announcement,
        announce: var_announce);
  }

  @protected
  ServerStatus sse_decode_server_status(SseDeserializer deserializer) {
    var inner = sse_decode_i_32(deserializer);
    return ServerStatus.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    return deserializer.buffer.getUint64();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_server_status(ServerStatus raw) {
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_16(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_device_config(
      DeviceConfig self, SseSerializer serializer) {
    sse_encode_device_config(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_server_config(
      ServerConfig self, SseSerializer serializer) {
    sse_encode_server_config(self, serializer);
  }

  @protected
  void sse_encode_device_config(DeviceConfig self, SseSerializer serializer) {
    sse_encode_String(self.alias, serializer);
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_String(self.deviceModel, serializer);
    sse_encode_String(self.deviceType, serializer);
    sse_encode_String(self.storePath, serializer);
  }

  @protected
  void sse_encode_device_info(DeviceInfo self, SseSerializer serializer) {
    sse_encode_String(self.alias, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_String(self.deviceModel, serializer);
    sse_encode_String(self.deviceType, serializer);
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_opt_String(self.address, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_String(self.protocol, serializer);
    sse_encode_bool(self.download, serializer);
    sse_encode_bool(self.announcement, serializer);
    sse_encode_bool(self.announce, serializer);
  }

  @protected
  void sse_encode_discover_state(DiscoverState self, SseSerializer serializer) {
    switch (self) {
      case DiscoverState_Discovering(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_list_device_info(field0, serializer);
      case DiscoverState_Done():
        sse_encode_i_32(1, serializer);
    }
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_device_info(
      List<DeviceInfo> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_device_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_i_32(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_progress(Progress self, SseSerializer serializer) {
    switch (self) {
      case Progress_Prepare():
        sse_encode_i_32(0, serializer);
      case Progress_Idle():
        sse_encode_i_32(1, serializer);
      case Progress_Progress(field0: final field0, field1: final field1):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
        sse_encode_usize(field1, serializer);
      case Progress_Done():
        sse_encode_i_32(3, serializer);
    }
  }

  @protected
  void sse_encode_server_config(ServerConfig self, SseSerializer serializer) {
    sse_encode_String(self.multicastAddr, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_String(self.protocol, serializer);
    sse_encode_bool(self.download, serializer);
    sse_encode_bool(self.announcement, serializer);
    sse_encode_bool(self.announce, serializer);
  }

  @protected
  void sse_encode_server_status(ServerStatus self, SseSerializer serializer) {
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    serializer.buffer.putUint64(self);
  }
}
