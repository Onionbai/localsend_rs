// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/model.dart';
import 'bridge/bridge.dart';
import 'dart:async';
import 'dart:convert';
import 'discovery/model.dart';
import 'frb_generated.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  FileInfo dco_decode_file_info(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  int dco_decode_i_64(dynamic raw);

  @protected
  List<FileInfo> dco_decode_list_file_info(dynamic raw);

  @protected
  List<Node> dco_decode_list_node(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw);

  @protected
  LogEntry dco_decode_log_entry(dynamic raw);

  @protected
  MissionItem dco_decode_mission_item(dynamic raw);

  @protected
  Node dco_decode_node(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8(dynamic raw);

  @protected
  int dco_decode_u_16(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  FileInfo sse_decode_file_info(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  int sse_decode_i_64(SseDeserializer deserializer);

  @protected
  List<FileInfo> sse_decode_list_file_info(SseDeserializer deserializer);

  @protected
  List<Node> sse_decode_list_node(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer);

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer);

  @protected
  MissionItem sse_decode_mission_item(SseDeserializer deserializer);

  @protected
  Node sse_decode_node(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8(SseDeserializer deserializer);

  @protected
  int sse_decode_u_16(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_file_info(FileInfo raw) {
    return [
      cst_encode_String(raw.id),
      cst_encode_String(raw.fileName),
      cst_encode_i_64(raw.size),
      cst_encode_String(raw.fileType),
      cst_encode_opt_String(raw.sha256),
      cst_encode_opt_list_prim_u_8(raw.preview)
    ];
  }

  @protected
  Object cst_encode_i_64(int raw) {
    return castNativeBigInt(raw);
  }

  @protected
  List<dynamic> cst_encode_list_file_info(List<FileInfo> raw) {
    return raw.map(cst_encode_file_info).toList();
  }

  @protected
  List<dynamic> cst_encode_list_node(List<Node> raw) {
    return raw.map(cst_encode_node).toList();
  }

  @protected
  Uint8List cst_encode_list_prim_u_8(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> cst_encode_log_entry(LogEntry raw) {
    return [
      cst_encode_i_64(raw.timeMillis),
      cst_encode_i_32(raw.level),
      cst_encode_String(raw.tag),
      cst_encode_String(raw.msg)
    ];
  }

  @protected
  List<dynamic> cst_encode_mission_item(MissionItem raw) {
    return [cst_encode_String(raw.id), cst_encode_list_file_info(raw.fileInfo)];
  }

  @protected
  List<dynamic> cst_encode_node(Node raw) {
    return [
      cst_encode_String(raw.alias),
      cst_encode_String(raw.version),
      cst_encode_String(raw.deviceModel),
      cst_encode_String(raw.deviceType),
      cst_encode_String(raw.fingerprint),
      cst_encode_String(raw.address),
      cst_encode_u_16(raw.port),
      cst_encode_String(raw.protocol),
      cst_encode_bool(raw.download),
      cst_encode_bool(raw.announcement),
      cst_encode_bool(raw.announce)
    ];
  }

  @protected
  String? cst_encode_opt_String(String? raw) {
    return raw == null ? null : cst_encode_String(raw);
  }

  @protected
  Uint8List? cst_encode_opt_list_prim_u_8(Uint8List? raw) {
    return raw == null ? null : cst_encode_list_prim_u_8(raw);
  }

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_u_16(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_file_info(FileInfo self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_file_info(List<FileInfo> self, SseSerializer serializer);

  @protected
  void sse_encode_list_node(List<Node> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer);

  @protected
  void sse_encode_mission_item(MissionItem self, SseSerializer serializer);

  @protected
  void sse_encode_node(Node self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_list_prim_u_8(Uint8List? self, SseSerializer serializer);

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire extends BaseWire {
  RustLibWire.fromExternalLibrary(ExternalLibrary lib);

  void dart_fn_deliver_output(int call_id, PlatformGeneralizedUint8ListPtr ptr_,
          int rust_vec_len_, int data_len_) =>
      wasmModule.dart_fn_deliver_output(
          call_id, ptr_, rust_vec_len_, data_len_);

  void wire_accept_mission(
          NativePortType port_, String mission_id, bool accept) =>
      wasmModule.wire_accept_mission(port_, mission_id, accept);

  void wire_create_log_stream(NativePortType port_) =>
      wasmModule.wire_create_log_stream(port_);

  void wire_discover(NativePortType port_) => wasmModule.wire_discover(port_);

  void wire_mission_channel(NativePortType port_) =>
      wasmModule.wire_mission_channel(port_);

  void wire_node_channel(NativePortType port_) =>
      wasmModule.wire_node_channel(port_);

  void wire_rust_set_up(NativePortType port_, bool is_debug) =>
      wasmModule.wire_rust_set_up(port_, is_debug);

  void wire_setup(NativePortType port_) => wasmModule.wire_setup(port_);

  void wire_start(NativePortType port_) => wasmModule.wire_start(port_);

  void wire_stop(NativePortType port_) => wasmModule.wire_stop(port_);
}

@JS('wasm_bindgen')
external RustLibWasmModule get wasmModule;

@JS()
@anonymous
class RustLibWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external RustLibWasmModule bind(dynamic thisArg, String moduleName);

  external void dart_fn_deliver_output(int call_id,
      PlatformGeneralizedUint8ListPtr ptr_, int rust_vec_len_, int data_len_);

  external void wire_accept_mission(
      NativePortType port_, String mission_id, bool accept);

  external void wire_create_log_stream(NativePortType port_);

  external void wire_discover(NativePortType port_);

  external void wire_mission_channel(NativePortType port_);

  external void wire_node_channel(NativePortType port_);

  external void wire_rust_set_up(NativePortType port_, bool is_debug);

  external void wire_setup(NativePortType port_);

  external void wire_start(NativePortType port_);

  external void wire_stop(NativePortType port_);
}
