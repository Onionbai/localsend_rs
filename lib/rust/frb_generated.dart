// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables

import 'api/model.dart';
import 'bridge/bridge.dart';
import 'dart:async';
import 'dart:convert';
import 'discovery/model.dart';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'logger.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<void> acceptMission(
      {required String missionId, required bool accept, dynamic hint});

  Stream<LogEntry> createLogStream({dynamic hint});

  Future<void> discover({dynamic hint});

  Stream<MissionItem> missionChannel({dynamic hint});

  Stream<List<Node>> nodeChannel({dynamic hint});

  Future<void> rustSetUp({required bool isDebug, dynamic hint});

  Future<void> setup({dynamic hint});

  Future<void> start({dynamic hint});

  Future<void> stop({dynamic hint});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> acceptMission(
      {required String missionId, required bool accept, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(missionId);
        var arg1 = cst_encode_bool(accept);
        return wire.wire_accept_mission(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kAcceptMissionConstMeta,
      argValues: [missionId, accept],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAcceptMissionConstMeta => const TaskConstMeta(
        debugName: "accept_mission",
        argNames: ["missionId", "accept"],
      );

  @override
  Stream<LogEntry> createLogStream({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_create_log_stream(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_log_entry,
        decodeErrorData: dco_decode_String,
      ),
      constMeta: kCreateLogStreamConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kCreateLogStreamConstMeta => const TaskConstMeta(
        debugName: "create_log_stream",
        argNames: [],
      );

  @override
  Future<void> discover({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_discover(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kDiscoverConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kDiscoverConstMeta => const TaskConstMeta(
        debugName: "discover",
        argNames: [],
      );

  @override
  Stream<MissionItem> missionChannel({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_mission_channel(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_mission_item,
        decodeErrorData: null,
      ),
      constMeta: kMissionChannelConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kMissionChannelConstMeta => const TaskConstMeta(
        debugName: "mission_channel",
        argNames: [],
      );

  @override
  Stream<List<Node>> nodeChannel({dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        return wire.wire_node_channel(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_node,
        decodeErrorData: null,
      ),
      constMeta: kNodeChannelConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNodeChannelConstMeta => const TaskConstMeta(
        debugName: "node_channel",
        argNames: [],
      );

  @override
  Future<void> rustSetUp({required bool isDebug, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_bool(isDebug);
        return wire.wire_rust_set_up(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kRustSetUpConstMeta,
      argValues: [isDebug],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kRustSetUpConstMeta => const TaskConstMeta(
        debugName: "rust_set_up",
        argNames: ["isDebug"],
      );

  @override
  Future<void> setup({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_setup(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kSetupConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kSetupConstMeta => const TaskConstMeta(
        debugName: "setup",
        argNames: [],
      );

  @override
  Future<void> start({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_start(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStartConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStartConstMeta => const TaskConstMeta(
        debugName: "start",
        argNames: [],
      );

  @override
  Future<void> stop({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_stop(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kStopConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kStopConstMeta => const TaskConstMeta(
        debugName: "stop",
        argNames: [],
      );

  @protected
  String dco_decode_String(dynamic raw) {
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    return raw as bool;
  }

  @protected
  FileInfo dco_decode_file_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return FileInfo(
      id: dco_decode_String(arr[0]),
      fileName: dco_decode_String(arr[1]),
      size: dco_decode_i_64(arr[2]),
      fileType: dco_decode_String(arr[3]),
      sha256: dco_decode_opt_String(arr[4]),
      preview: dco_decode_opt_list_prim_u_8(arr[5]),
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<FileInfo> dco_decode_list_file_info(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_file_info).toList();
  }

  @protected
  List<Node> dco_decode_list_node(dynamic raw) {
    return (raw as List<dynamic>).map(dco_decode_node).toList();
  }

  @protected
  Uint8List dco_decode_list_prim_u_8(dynamic raw) {
    return raw as Uint8List;
  }

  @protected
  LogEntry dco_decode_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LogEntry(
      timeMillis: dco_decode_i_64(arr[0]),
      level: dco_decode_i_32(arr[1]),
      tag: dco_decode_String(arr[2]),
      msg: dco_decode_String(arr[3]),
    );
  }

  @protected
  MissionItem dco_decode_mission_item(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return MissionItem(
      id: dco_decode_String(arr[0]),
      fileInfo: dco_decode_list_file_info(arr[1]),
    );
  }

  @protected
  Node dco_decode_node(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Node(
      alias: dco_decode_String(arr[0]),
      version: dco_decode_String(arr[1]),
      deviceModel: dco_decode_String(arr[2]),
      deviceType: dco_decode_String(arr[3]),
      fingerprint: dco_decode_String(arr[4]),
      address: dco_decode_String(arr[5]),
      port: dco_decode_u_16(arr[6]),
      protocol: dco_decode_String(arr[7]),
      download: dco_decode_bool(arr[8]),
      announcement: dco_decode_bool(arr[9]),
      announce: dco_decode_bool(arr[10]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8(dynamic raw) {
    return raw == null ? null : dco_decode_list_prim_u_8(raw);
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    return;
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    var inner = sse_decode_list_prim_u_8(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  FileInfo sse_decode_file_info(SseDeserializer deserializer) {
    var var_id = sse_decode_String(deserializer);
    var var_fileName = sse_decode_String(deserializer);
    var var_size = sse_decode_i_64(deserializer);
    var var_fileType = sse_decode_String(deserializer);
    var var_sha256 = sse_decode_opt_String(deserializer);
    var var_preview = sse_decode_opt_list_prim_u_8(deserializer);
    return FileInfo(
        id: var_id,
        fileName: var_fileName,
        size: var_size,
        fileType: var_fileType,
        sha256: var_sha256,
        preview: var_preview);
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    return deserializer.buffer.getInt64();
  }

  @protected
  List<FileInfo> sse_decode_list_file_info(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <FileInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_file_info(deserializer));
    }
    return ans_;
  }

  @protected
  List<Node> sse_decode_list_node(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Node>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_node(deserializer));
    }
    return ans_;
  }

  @protected
  Uint8List sse_decode_list_prim_u_8(SseDeserializer deserializer) {
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  LogEntry sse_decode_log_entry(SseDeserializer deserializer) {
    var var_timeMillis = sse_decode_i_64(deserializer);
    var var_level = sse_decode_i_32(deserializer);
    var var_tag = sse_decode_String(deserializer);
    var var_msg = sse_decode_String(deserializer);
    return LogEntry(
        timeMillis: var_timeMillis,
        level: var_level,
        tag: var_tag,
        msg: var_msg);
  }

  @protected
  MissionItem sse_decode_mission_item(SseDeserializer deserializer) {
    var var_id = sse_decode_String(deserializer);
    var var_fileInfo = sse_decode_list_file_info(deserializer);
    return MissionItem(id: var_id, fileInfo: var_fileInfo);
  }

  @protected
  Node sse_decode_node(SseDeserializer deserializer) {
    var var_alias = sse_decode_String(deserializer);
    var var_version = sse_decode_String(deserializer);
    var var_deviceModel = sse_decode_String(deserializer);
    var var_deviceType = sse_decode_String(deserializer);
    var var_fingerprint = sse_decode_String(deserializer);
    var var_address = sse_decode_String(deserializer);
    var var_port = sse_decode_u_16(deserializer);
    var var_protocol = sse_decode_String(deserializer);
    var var_download = sse_decode_bool(deserializer);
    var var_announcement = sse_decode_bool(deserializer);
    var var_announce = sse_decode_bool(deserializer);
    return Node(
        alias: var_alias,
        version: var_version,
        deviceModel: var_deviceModel,
        deviceType: var_deviceType,
        fingerprint: var_fingerprint,
        address: var_address,
        port: var_port,
        protocol: var_protocol,
        download: var_download,
        announcement: var_announcement,
        announce: var_announce);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8(SseDeserializer deserializer) {
    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {}

  @protected
  bool cst_encode_bool(bool raw) {
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_16(int raw) {
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    return raw;
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    sse_encode_list_prim_u_8(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_file_info(FileInfo self, SseSerializer serializer) {
    sse_encode_String(self.id, serializer);
    sse_encode_String(self.fileName, serializer);
    sse_encode_i_64(self.size, serializer);
    sse_encode_String(self.fileType, serializer);
    sse_encode_opt_String(self.sha256, serializer);
    sse_encode_opt_list_prim_u_8(self.preview, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_file_info(
      List<FileInfo> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_file_info(item, serializer);
    }
  }

  @protected
  void sse_encode_list_node(List<Node> self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_node(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8(Uint8List self, SseSerializer serializer) {
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_log_entry(LogEntry self, SseSerializer serializer) {
    sse_encode_i_64(self.timeMillis, serializer);
    sse_encode_i_32(self.level, serializer);
    sse_encode_String(self.tag, serializer);
    sse_encode_String(self.msg, serializer);
  }

  @protected
  void sse_encode_mission_item(MissionItem self, SseSerializer serializer) {
    sse_encode_String(self.id, serializer);
    sse_encode_list_file_info(self.fileInfo, serializer);
  }

  @protected
  void sse_encode_node(Node self, SseSerializer serializer) {
    sse_encode_String(self.alias, serializer);
    sse_encode_String(self.version, serializer);
    sse_encode_String(self.deviceModel, serializer);
    sse_encode_String(self.deviceType, serializer);
    sse_encode_String(self.fingerprint, serializer);
    sse_encode_String(self.address, serializer);
    sse_encode_u_16(self.port, serializer);
    sse_encode_String(self.protocol, serializer);
    sse_encode_bool(self.download, serializer);
    sse_encode_bool(self.announcement, serializer);
    sse_encode_bool(self.announce, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8(Uint8List? self, SseSerializer serializer) {
    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {}
}
