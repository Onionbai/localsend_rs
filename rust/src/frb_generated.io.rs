// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::simple::DeviceConfig> for *mut wire_cst_device_config {
    fn cst_decode(self) -> crate::api::simple::DeviceConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::simple::DeviceConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::simple::ServerConfig> for *mut wire_cst_server_config {
    fn cst_decode(self) -> crate::api::simple::ServerConfig {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::simple::ServerConfig>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::simple::DeviceConfig> for wire_cst_device_config {
    fn cst_decode(self) -> crate::api::simple::DeviceConfig {
        crate::api::simple::DeviceConfig {
            alias: self.alias.cst_decode(),
            fingerprint: self.fingerprint.cst_decode(),
            device_model: self.device_model.cst_decode(),
            device_type: self.device_type.cst_decode(),
            store_path: self.store_path.cst_decode(),
        }
    }
}
impl CstDecode<crate::core::model::DeviceInfo> for wire_cst_device_info {
    fn cst_decode(self) -> crate::core::model::DeviceInfo {
        crate::core::model::DeviceInfo {
            alias: self.alias.cst_decode(),
            version: self.version.cst_decode(),
            device_model: self.device_model.cst_decode(),
            device_type: self.device_type.cst_decode(),
            fingerprint: self.fingerprint.cst_decode(),
            address: self.address.cst_decode(),
            port: self.port.cst_decode(),
            protocol: self.protocol.cst_decode(),
            download: self.download.cst_decode(),
            announcement: self.announcement.cst_decode(),
            announce: self.announce.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::simple::DiscoverState> for wire_cst_discover_state {
    fn cst_decode(self) -> crate::api::simple::DiscoverState {
        match self.tag {
            0 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Discovering);
                crate::api::simple::DiscoverState::Discovering(ans.field0.cst_decode())
            },
            1 => crate::api::simple::DiscoverState::Done,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<Vec<crate::core::model::DeviceInfo>> for *mut wire_cst_list_device_info {
    fn cst_decode(self) -> Vec<crate::core::model::DeviceInfo> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<crate::api::simple::LogEntry> for wire_cst_log_entry {
    fn cst_decode(self) -> crate::api::simple::LogEntry {
        crate::api::simple::LogEntry {
            time_millis: self.time_millis.cst_decode(),
            level: self.level.cst_decode(),
            tag: self.tag.cst_decode(),
            msg: self.msg.cst_decode(),
        }
    }
}
impl CstDecode<crate::core::model::Progress> for wire_cst_progress {
    fn cst_decode(self) -> crate::core::model::Progress {
        match self.tag {
            0 => crate::core::model::Progress::Prepare,
            1 => crate::core::model::Progress::Idle,
            2 => unsafe {
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(self.kind);
                let ans = flutter_rust_bridge::for_generated::box_from_leak_ptr(ans.Progress);
                crate::core::model::Progress::Progress(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            },
            3 => crate::core::model::Progress::Done,
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::simple::ServerConfig> for wire_cst_server_config {
    fn cst_decode(self) -> crate::api::simple::ServerConfig {
        crate::api::simple::ServerConfig {
            multicast_addr: self.multicast_addr.cst_decode(),
            port: self.port.cst_decode(),
            protocol: self.protocol.cst_decode(),
            download: self.download.cst_decode(),
            announcement: self.announcement.cst_decode(),
            announce: self.announce.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_device_config {
    fn new_with_null_ptr() -> Self {
        Self {
            alias: core::ptr::null_mut(),
            fingerprint: core::ptr::null_mut(),
            device_model: core::ptr::null_mut(),
            device_type: core::ptr::null_mut(),
            store_path: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_device_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_device_info {
    fn new_with_null_ptr() -> Self {
        Self {
            alias: core::ptr::null_mut(),
            version: core::ptr::null_mut(),
            device_model: core::ptr::null_mut(),
            device_type: core::ptr::null_mut(),
            fingerprint: core::ptr::null_mut(),
            address: core::ptr::null_mut(),
            port: Default::default(),
            protocol: core::ptr::null_mut(),
            download: Default::default(),
            announcement: Default::default(),
            announce: Default::default(),
        }
    }
}
impl Default for wire_cst_device_info {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_discover_state {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_discover_state {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_entry {
    fn new_with_null_ptr() -> Self {
        Self {
            time_millis: Default::default(),
            level: Default::default(),
            tag: core::ptr::null_mut(),
            msg: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_entry {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_progress {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_progress {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_server_config {
    fn new_with_null_ptr() -> Self {
        Self {
            multicast_addr: core::ptr::null_mut(),
            port: Default::default(),
            protocol: core::ptr::null_mut(),
            download: Default::default(),
            announcement: Default::default(),
            announce: Default::default(),
        }
    }
}
impl Default for wire_cst_server_config {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn wire_accept(port_: i64, is_accept: bool) {
    wire_accept_impl(port_, is_accept)
}

#[no_mangle]
pub extern "C" fn wire_create_log_stream(port_: i64) {
    wire_create_log_stream_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_discover(port_: i64) {
    wire_discover_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_init_server(port_: i64, device: *mut wire_cst_device_config) {
    wire_init_server_impl(port_, device)
}

#[no_mangle]
pub extern "C" fn wire_listen_discover(port_: i64) {
    wire_listen_discover_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_listen_progress(port_: i64) {
    wire_listen_progress_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_set_up(port_: i64, isDebug: bool) {
    wire_rust_set_up_impl(port_, isDebug)
}

#[no_mangle]
pub extern "C" fn wire_server_status(port_: i64) {
    wire_server_status_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_start_server(port_: i64, config: *mut wire_cst_server_config) {
    wire_start_server_impl(port_, config)
}

#[no_mangle]
pub extern "C" fn wire_stop_server(port_: i64) {
    wire_stop_server_impl(port_)
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_device_config() -> *mut wire_cst_device_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_device_config::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_box_autoadd_server_config() -> *mut wire_cst_server_config {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_server_config::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn cst_new_list_device_info(len: i32) -> *mut wire_cst_list_device_info {
    let wrap = wire_cst_list_device_info {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_device_info>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn cst_inflate_DiscoverState_Discovering() -> *mut DiscoverStateKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(DiscoverStateKind {
        Discovering: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_DiscoverState_Discovering {
                field0: core::ptr::null_mut(),
            },
        ),
    })
}

#[no_mangle]
pub extern "C" fn cst_inflate_Progress_Progress() -> *mut ProgressKind {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ProgressKind {
        Progress: flutter_rust_bridge::for_generated::new_leak_box_ptr(
            wire_cst_Progress_Progress {
                field0: Default::default(),
                field1: Default::default(),
            },
        ),
    })
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_device_config {
    alias: *mut wire_cst_list_prim_u_8,
    fingerprint: *mut wire_cst_list_prim_u_8,
    device_model: *mut wire_cst_list_prim_u_8,
    device_type: *mut wire_cst_list_prim_u_8,
    store_path: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_device_info {
    alias: *mut wire_cst_list_prim_u_8,
    version: *mut wire_cst_list_prim_u_8,
    device_model: *mut wire_cst_list_prim_u_8,
    device_type: *mut wire_cst_list_prim_u_8,
    fingerprint: *mut wire_cst_list_prim_u_8,
    address: *mut wire_cst_list_prim_u_8,
    port: u16,
    protocol: *mut wire_cst_list_prim_u_8,
    download: bool,
    announcement: bool,
    announce: bool,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_discover_state {
    tag: i32,
    kind: *mut DiscoverStateKind,
}
#[repr(C)]
pub union DiscoverStateKind {
    Discovering: *mut wire_cst_DiscoverState_Discovering,
    Done: *mut wire_cst_DiscoverState_Done,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DiscoverState_Discovering {
    field0: *mut wire_cst_list_device_info,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_DiscoverState_Done {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_device_info {
    ptr: *mut wire_cst_device_info,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_entry {
    time_millis: i64,
    level: i32,
    tag: *mut wire_cst_list_prim_u_8,
    msg: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_progress {
    tag: i32,
    kind: *mut ProgressKind,
}
#[repr(C)]
pub union ProgressKind {
    Prepare: *mut wire_cst_Progress_Prepare,
    Idle: *mut wire_cst_Progress_Idle,
    Progress: *mut wire_cst_Progress_Progress,
    Done: *mut wire_cst_Progress_Done,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_Progress_Prepare {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_Progress_Idle {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_Progress_Progress {
    field0: usize,
    field1: usize,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_Progress_Done {}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_server_config {
    multicast_addr: *mut wire_cst_list_prim_u_8,
    port: u16,
    protocol: *mut wire_cst_list_prim_u_8,
    download: bool,
    announcement: bool,
    announce: bool,
}
