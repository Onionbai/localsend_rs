// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl CstDecode<String> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::model::FileInfo> for wire_cst_file_info {
    fn cst_decode(self) -> crate::api::model::FileInfo {
        crate::api::model::FileInfo {
            id: self.id.cst_decode(),
            file_name: self.file_name.cst_decode(),
            size: self.size.cst_decode(),
            file_type: self.file_type.cst_decode(),
            sha256: self.sha256.cst_decode(),
            preview: self.preview.cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::api::model::FileInfo>> for *mut wire_cst_list_file_info {
    fn cst_decode(self) -> Vec<crate::api::model::FileInfo> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::discovery::model::Node>> for *mut wire_cst_list_node {
    fn cst_decode(self) -> Vec<crate::discovery::model::Node> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8 {
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<crate::logger::LogEntry> for wire_cst_log_entry {
    fn cst_decode(self) -> crate::logger::LogEntry {
        crate::logger::LogEntry {
            time_millis: self.time_millis.cst_decode(),
            level: self.level.cst_decode(),
            tag: self.tag.cst_decode(),
            msg: self.msg.cst_decode(),
        }
    }
}
impl CstDecode<crate::bridge::bridge::MissionItem> for wire_cst_mission_item {
    fn cst_decode(self) -> crate::bridge::bridge::MissionItem {
        crate::bridge::bridge::MissionItem {
            id: self.id.cst_decode(),
            file_info: self.file_info.cst_decode(),
        }
    }
}
impl CstDecode<crate::discovery::model::Node> for wire_cst_node {
    fn cst_decode(self) -> crate::discovery::model::Node {
        crate::discovery::model::Node {
            alias: self.alias.cst_decode(),
            version: self.version.cst_decode(),
            device_model: self.device_model.cst_decode(),
            device_type: self.device_type.cst_decode(),
            fingerprint: self.fingerprint.cst_decode(),
            address: self.address.cst_decode(),
            port: self.port.cst_decode(),
            protocol: self.protocol.cst_decode(),
            download: self.download.cst_decode(),
            announcement: self.announcement.cst_decode(),
            announce: self.announce.cst_decode(),
        }
    }
}
pub trait NewWithNullPtr {
    fn new_with_null_ptr() -> Self;
}

impl<T> NewWithNullPtr for *mut T {
    fn new_with_null_ptr() -> Self {
        std::ptr::null_mut()
    }
}
impl NewWithNullPtr for wire_cst_file_info {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            file_name: core::ptr::null_mut(),
            size: Default::default(),
            file_type: core::ptr::null_mut(),
            sha256: core::ptr::null_mut(),
            preview: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_file_info {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_log_entry {
    fn new_with_null_ptr() -> Self {
        Self {
            time_millis: Default::default(),
            level: Default::default(),
            tag: core::ptr::null_mut(),
            msg: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_log_entry {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_mission_item {
    fn new_with_null_ptr() -> Self {
        Self {
            id: core::ptr::null_mut(),
            file_info: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_mission_item {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_node {
    fn new_with_null_ptr() -> Self {
        Self {
            alias: core::ptr::null_mut(),
            version: core::ptr::null_mut(),
            device_model: core::ptr::null_mut(),
            device_type: core::ptr::null_mut(),
            fingerprint: core::ptr::null_mut(),
            address: core::ptr::null_mut(),
            port: Default::default(),
            protocol: core::ptr::null_mut(),
            download: Default::default(),
            announcement: Default::default(),
            announce: Default::default(),
        }
    }
}
impl Default for wire_cst_node {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: *mut u8,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[no_mangle]
pub extern "C" fn wire_accept_mission(
    port_: i64,
    mission_id: *mut wire_cst_list_prim_u_8,
    accept: bool,
) {
    wire_accept_mission_impl(port_, mission_id, accept)
}

#[no_mangle]
pub extern "C" fn wire_create_log_stream(port_: i64) {
    wire_create_log_stream_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_discover(port_: i64) {
    wire_discover_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_mission_channel(port_: i64) {
    wire_mission_channel_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_node_channel(port_: i64) {
    wire_node_channel_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_rust_set_up(port_: i64, is_debug: bool) {
    wire_rust_set_up_impl(port_, is_debug)
}

#[no_mangle]
pub extern "C" fn wire_setup(port_: i64) {
    wire_setup_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_start(port_: i64) {
    wire_start_impl(port_)
}

#[no_mangle]
pub extern "C" fn wire_stop(port_: i64) {
    wire_stop_impl(port_)
}

#[no_mangle]
pub extern "C" fn cst_new_list_file_info(len: i32) -> *mut wire_cst_list_file_info {
    let wrap = wire_cst_list_file_info {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_file_info>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_node(len: i32) -> *mut wire_cst_list_node {
    let wrap = wire_cst_list_node {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_node>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn cst_new_list_prim_u_8(len: i32) -> *mut wire_cst_list_prim_u_8 {
    let ans = wire_cst_list_prim_u_8 {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_file_info {
    id: *mut wire_cst_list_prim_u_8,
    file_name: *mut wire_cst_list_prim_u_8,
    size: i64,
    file_type: *mut wire_cst_list_prim_u_8,
    sha256: *mut wire_cst_list_prim_u_8,
    preview: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_file_info {
    ptr: *mut wire_cst_file_info,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_node {
    ptr: *mut wire_cst_node,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_list_prim_u_8 {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_log_entry {
    time_millis: i64,
    level: i32,
    tag: *mut wire_cst_list_prim_u_8,
    msg: *mut wire_cst_list_prim_u_8,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_mission_item {
    id: *mut wire_cst_list_prim_u_8,
    file_info: *mut wire_cst_list_file_info,
}
#[repr(C)]
#[derive(Clone)]
pub struct wire_cst_node {
    alias: *mut wire_cst_list_prim_u_8,
    version: *mut wire_cst_list_prim_u_8,
    device_model: *mut wire_cst_list_prim_u_8,
    device_type: *mut wire_cst_list_prim_u_8,
    fingerprint: *mut wire_cst_list_prim_u_8,
    address: *mut wire_cst_list_prim_u_8,
    port: u16,
    protocol: *mut wire_cst_list_prim_u_8,
    download: bool,
    announcement: bool,
    announce: bool,
}
