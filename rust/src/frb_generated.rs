// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_accept_mission_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    mission_id: impl CstDecode<String> + core::panic::UnwindSafe,
    accept: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "accept_mission",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_mission_id = mission_id.cst_decode();
            let api_accept = accept.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::bridge::bridge::accept_mission(
                        api_mission_id,
                        api_accept,
                    ))
                })())
            }
        },
    )
}
fn wire_create_log_stream_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::bridge::bridge::create_log_stream(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::logger::LogEntry>(),
                    ))
                })())
            }
        },
    )
}
fn wire_discover_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "discover",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::bridge::bridge::discover())
                })())
            }
        },
    )
}
fn wire_mission_channel_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "mission_channel",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::bridge::bridge::mission_channel(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::bridge::bridge::MissionItem>(),
                    )))
                })())
            }
        },
    )
}
fn wire_node_channel_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "node_channel",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::bridge::bridge::node_channel(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, Vec<crate::discovery::model::Node>>(),
                    )))
                })())
            }
        },
    )
}
fn wire_rust_set_up_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    is_debug: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_set_up",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_is_debug = is_debug.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::bridge::bridge::rust_set_up(api_is_debug))
                })())
            }
        },
    )
}
fn wire_setup_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "setup",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    (move || Result::<_, ()>::Ok(crate::bridge::bridge::setup()))(),
                )
            }
        },
    )
}
fn wire_start_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    (move || Result::<_, ()>::Ok(crate::bridge::bridge::start()))(),
                )
            }
        },
    )
}
fn wire_stop_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "stop",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || Result::<_, ()>::Ok(crate::bridge::bridge::stop()))())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<u16> for u16 {
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::model::FileInfo {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_fileName = <String>::sse_decode(deserializer);
        let mut var_size = <i64>::sse_decode(deserializer);
        let mut var_fileType = <String>::sse_decode(deserializer);
        let mut var_sha256 = <Option<String>>::sse_decode(deserializer);
        let mut var_preview = <Option<Vec<u8>>>::sse_decode(deserializer);
        return crate::api::model::FileInfo {
            id: var_id,
            file_name: var_fileName,
            size: var_size,
            file_type: var_fileType,
            sha256: var_sha256,
            preview: var_preview,
        };
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::api::model::FileInfo> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::model::FileInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::discovery::model::Node> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::discovery::model::Node>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::logger::LogEntry {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_timeMillis = <i64>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::logger::LogEntry {
            time_millis: var_timeMillis,
            level: var_level,
            tag: var_tag,
            msg: var_msg,
        };
    }
}

impl SseDecode for crate::bridge::bridge::MissionItem {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_id = <String>::sse_decode(deserializer);
        let mut var_fileInfo = <Vec<crate::api::model::FileInfo>>::sse_decode(deserializer);
        return crate::bridge::bridge::MissionItem {
            id: var_id,
            file_info: var_fileInfo,
        };
    }
}

impl SseDecode for crate::discovery::model::Node {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_alias = <String>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_deviceModel = <String>::sse_decode(deserializer);
        let mut var_deviceType = <String>::sse_decode(deserializer);
        let mut var_fingerprint = <String>::sse_decode(deserializer);
        let mut var_address = <String>::sse_decode(deserializer);
        let mut var_port = <u16>::sse_decode(deserializer);
        let mut var_protocol = <String>::sse_decode(deserializer);
        let mut var_download = <bool>::sse_decode(deserializer);
        let mut var_announcement = <bool>::sse_decode(deserializer);
        let mut var_announce = <bool>::sse_decode(deserializer);
        return crate::discovery::model::Node {
            alias: var_alias,
            version: var_version,
            device_model: var_deviceModel,
            device_type: var_deviceType,
            fingerprint: var_fingerprint,
            address: var_address,
            port: var_port,
            protocol: var_protocol,
            download: var_download,
            announcement: var_announcement,
            announce: var_announce,
        };
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<Vec<u8>> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<Vec<u8>>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for u16 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::api::model::FileInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.file_name.into_into_dart().into_dart(),
            self.size.into_into_dart().into_dart(),
            self.file_type.into_into_dart().into_dart(),
            self.sha256.into_into_dart().into_dart(),
            self.preview.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::model::FileInfo {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::model::FileInfo>
    for crate::api::model::FileInfo
{
    fn into_into_dart(self) -> crate::api::model::FileInfo {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::logger::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.time_millis.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::logger::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::logger::LogEntry> for crate::logger::LogEntry {
    fn into_into_dart(self) -> crate::logger::LogEntry {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::bridge::bridge::MissionItem {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.id.into_into_dart().into_dart(),
            self.file_info.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::bridge::bridge::MissionItem
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::bridge::bridge::MissionItem>
    for crate::bridge::bridge::MissionItem
{
    fn into_into_dart(self) -> crate::bridge::bridge::MissionItem {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::discovery::model::Node {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.alias.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
            self.device_model.into_into_dart().into_dart(),
            self.device_type.into_into_dart().into_dart(),
            self.fingerprint.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.port.into_into_dart().into_dart(),
            self.protocol.into_into_dart().into_dart(),
            self.download.into_into_dart().into_dart(),
            self.announcement.into_into_dart().into_dart(),
            self.announce.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::discovery::model::Node {}
impl flutter_rust_bridge::IntoIntoDart<crate::discovery::model::Node>
    for crate::discovery::model::Node
{
    fn into_into_dart(self) -> crate::discovery::model::Node {
        self
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::model::FileInfo {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <String>::sse_encode(self.file_name, serializer);
        <i64>::sse_encode(self.size, serializer);
        <String>::sse_encode(self.file_type, serializer);
        <Option<String>>::sse_encode(self.sha256, serializer);
        <Option<Vec<u8>>>::sse_encode(self.preview, serializer);
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::api::model::FileInfo> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::model::FileInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::discovery::model::Node> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::discovery::model::Node>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::logger::LogEntry {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.time_millis, serializer);
        <i32>::sse_encode(self.level, serializer);
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for crate::bridge::bridge::MissionItem {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.id, serializer);
        <Vec<crate::api::model::FileInfo>>::sse_encode(self.file_info, serializer);
    }
}

impl SseEncode for crate::discovery::model::Node {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.alias, serializer);
        <String>::sse_encode(self.version, serializer);
        <String>::sse_encode(self.device_model, serializer);
        <String>::sse_encode(self.device_type, serializer);
        <String>::sse_encode(self.fingerprint, serializer);
        <String>::sse_encode(self.address, serializer);
        <u16>::sse_encode(self.port, serializer);
        <String>::sse_encode(self.protocol, serializer);
        <bool>::sse_encode(self.download, serializer);
        <bool>::sse_encode(self.announcement, serializer);
        <bool>::sse_encode(self.announce, serializer);
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<Vec<u8>> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <Vec<u8>>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u16 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
