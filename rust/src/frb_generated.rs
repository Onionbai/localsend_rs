// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!();

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_accept_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    is_accept: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "accept",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_is_accept = is_accept.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::accept(api_is_accept))
                })())
            }
        },
    )
}
fn wire_create_log_stream_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "create_log_stream",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    crate::api::simple::create_log_stream(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::simple::LogEntry>(),
                    ))
                })())
            }
        },
    )
}
fn wire_discover_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "discover",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco(
                    (move || Result::<_, ()>::Ok(crate::api::simple::discover()))(),
                )
            }
        },
    )
}
fn wire_init_server_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    device: impl CstDecode<crate::api::simple::DeviceConfig> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_server",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_device = device.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::init_server(api_device))
                })())
            }
        },
    )
}
fn wire_listen_discover_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "listen_discover",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::listen_discover(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::simple::DiscoverState>(),
                    )))
                })())
            }
        },
    )
}
fn wire_listen_progress_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "listen_progress",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::listen_progress(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::core::model::Progress>(),
                    )))
                })())
            }
        },
    )
}
fn wire_rust_set_up_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    isDebug: impl CstDecode<bool> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "rust_set_up",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_isDebug = isDebug.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::rust_set_up(api_isDebug))
                })())
            }
        },
    )
}
fn wire_server_status_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "server_status",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Stream,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::server_status(StreamSink::new(
                        context
                            .rust2dart_context()
                            .stream_sink::<_, crate::api::simple::ServerStatus>(),
                    )))
                })())
            }
        },
    )
}
fn wire_start_server_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    config: impl CstDecode<crate::api::simple::ServerConfig> + core::panic::UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "start_server",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_config = config.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::start_server(api_config))
                })())
            }
        },
    )
}
fn wire_stop_server_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "stop_server",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::simple::stop_server())
                })())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<bool> for bool {
    fn cst_decode(self) -> bool {
        self
    }
}
impl CstDecode<i32> for i32 {
    fn cst_decode(self) -> i32 {
        self
    }
}
impl CstDecode<i64> for i64 {
    fn cst_decode(self) -> i64 {
        self
    }
}
impl CstDecode<crate::api::simple::ServerStatus> for i32 {
    fn cst_decode(self) -> crate::api::simple::ServerStatus {
        match self {
            0 => crate::api::simple::ServerStatus::Starting,
            1 => crate::api::simple::ServerStatus::Started,
            2 => crate::api::simple::ServerStatus::Stopping,
            3 => crate::api::simple::ServerStatus::Stopped,
            _ => unreachable!("Invalid variant for ServerStatus: {}", self),
        }
    }
}
impl CstDecode<u16> for u16 {
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u8> for u8 {
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for String {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::simple::DeviceConfig {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_alias = <String>::sse_decode(deserializer);
        let mut var_fingerprint = <String>::sse_decode(deserializer);
        let mut var_deviceModel = <String>::sse_decode(deserializer);
        let mut var_deviceType = <String>::sse_decode(deserializer);
        let mut var_storePath = <String>::sse_decode(deserializer);
        return crate::api::simple::DeviceConfig {
            alias: var_alias,
            fingerprint: var_fingerprint,
            device_model: var_deviceModel,
            device_type: var_deviceType,
            store_path: var_storePath,
        };
    }
}

impl SseDecode for crate::core::model::DeviceInfo {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_alias = <String>::sse_decode(deserializer);
        let mut var_version = <String>::sse_decode(deserializer);
        let mut var_deviceModel = <String>::sse_decode(deserializer);
        let mut var_deviceType = <String>::sse_decode(deserializer);
        let mut var_fingerprint = <String>::sse_decode(deserializer);
        let mut var_address = <Option<String>>::sse_decode(deserializer);
        let mut var_port = <u16>::sse_decode(deserializer);
        let mut var_protocol = <String>::sse_decode(deserializer);
        let mut var_download = <bool>::sse_decode(deserializer);
        let mut var_announcement = <bool>::sse_decode(deserializer);
        let mut var_announce = <bool>::sse_decode(deserializer);
        return crate::core::model::DeviceInfo {
            alias: var_alias,
            version: var_version,
            device_model: var_deviceModel,
            device_type: var_deviceType,
            fingerprint: var_fingerprint,
            address: var_address,
            port: var_port,
            protocol: var_protocol,
            download: var_download,
            announcement: var_announcement,
            announce: var_announce,
        };
    }
}

impl SseDecode for crate::api::simple::DiscoverState {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 =
                    <Vec<crate::core::model::DeviceInfo>>::sse_decode(deserializer);
                return crate::api::simple::DiscoverState::Discovering(var_field0);
            }
            1 => {
                return crate::api::simple::DiscoverState::Done;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for i32 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for i64 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i64::<NativeEndian>().unwrap()
    }
}

impl SseDecode for Vec<crate::core::model::DeviceInfo> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::core::model::DeviceInfo>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for crate::api::simple::LogEntry {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_timeMillis = <i64>::sse_decode(deserializer);
        let mut var_level = <i32>::sse_decode(deserializer);
        let mut var_tag = <String>::sse_decode(deserializer);
        let mut var_msg = <String>::sse_decode(deserializer);
        return crate::api::simple::LogEntry {
            time_millis: var_timeMillis,
            level: var_level,
            tag: var_tag,
            msg: var_msg,
        };
    }
}

impl SseDecode for Option<String> {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for crate::core::model::Progress {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                return crate::core::model::Progress::Prepare;
            }
            1 => {
                return crate::core::model::Progress::Idle;
            }
            2 => {
                let mut var_field0 = <usize>::sse_decode(deserializer);
                let mut var_field1 = <usize>::sse_decode(deserializer);
                return crate::core::model::Progress::Progress(var_field0, var_field1);
            }
            3 => {
                return crate::core::model::Progress::Done;
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::simple::ServerConfig {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_multicastAddr = <String>::sse_decode(deserializer);
        let mut var_port = <u16>::sse_decode(deserializer);
        let mut var_protocol = <String>::sse_decode(deserializer);
        let mut var_download = <bool>::sse_decode(deserializer);
        let mut var_announcement = <bool>::sse_decode(deserializer);
        let mut var_announce = <bool>::sse_decode(deserializer);
        return crate::api::simple::ServerConfig {
            multicast_addr: var_multicastAddr,
            port: var_port,
            protocol: var_protocol,
            download: var_download,
            announcement: var_announcement,
            announce: var_announce,
        };
    }
}

impl SseDecode for crate::api::simple::ServerStatus {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <i32>::sse_decode(deserializer);
        return match inner {
            0 => crate::api::simple::ServerStatus::Starting,
            1 => crate::api::simple::ServerStatus::Started,
            2 => crate::api::simple::ServerStatus::Stopping,
            3 => crate::api::simple::ServerStatus::Stopped,
            _ => unreachable!("Invalid variant for ServerStatus: {}", inner),
        };
    }
}

impl SseDecode for u16 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for () {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

// Section: rust2dart

impl flutter_rust_bridge::IntoDart for crate::api::simple::DeviceConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.alias.into_into_dart().into_dart(),
            self.fingerprint.into_into_dart().into_dart(),
            self.device_model.into_into_dart().into_dart(),
            self.device_type.into_into_dart().into_dart(),
            self.store_path.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::DeviceConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::DeviceConfig>
    for crate::api::simple::DeviceConfig
{
    fn into_into_dart(self) -> crate::api::simple::DeviceConfig {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::core::model::DeviceInfo {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.alias.into_into_dart().into_dart(),
            self.version.into_into_dart().into_dart(),
            self.device_model.into_into_dart().into_dart(),
            self.device_type.into_into_dart().into_dart(),
            self.fingerprint.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.port.into_into_dart().into_dart(),
            self.protocol.into_into_dart().into_dart(),
            self.download.into_into_dart().into_dart(),
            self.announcement.into_into_dart().into_dart(),
            self.announce.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::core::model::DeviceInfo
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::core::model::DeviceInfo>
    for crate::core::model::DeviceInfo
{
    fn into_into_dart(self) -> crate::core::model::DeviceInfo {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::simple::DiscoverState {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::simple::DiscoverState::Discovering(field0) => {
                vec![0.into_dart(), field0.into_into_dart().into_dart()]
            }
            crate::api::simple::DiscoverState::Done => {
                vec![1.into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::DiscoverState
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::DiscoverState>
    for crate::api::simple::DiscoverState
{
    fn into_into_dart(self) -> crate::api::simple::DiscoverState {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::simple::LogEntry {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.time_millis.into_into_dart().into_dart(),
            self.level.into_into_dart().into_dart(),
            self.tag.into_into_dart().into_dart(),
            self.msg.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::simple::LogEntry {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::LogEntry>
    for crate::api::simple::LogEntry
{
    fn into_into_dart(self) -> crate::api::simple::LogEntry {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::core::model::Progress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::core::model::Progress::Prepare => {
                vec![0.into_dart()]
            }
            crate::core::model::Progress::Idle => {
                vec![1.into_dart()]
            }
            crate::core::model::Progress::Progress(field0, field1) => {
                vec![
                    2.into_dart(),
                    field0.into_into_dart().into_dart(),
                    field1.into_into_dart().into_dart(),
                ]
            }
            crate::core::model::Progress::Done => {
                vec![3.into_dart()]
            }
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::core::model::Progress {}
impl flutter_rust_bridge::IntoIntoDart<crate::core::model::Progress>
    for crate::core::model::Progress
{
    fn into_into_dart(self) -> crate::core::model::Progress {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::simple::ServerConfig {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        vec![
            self.multicast_addr.into_into_dart().into_dart(),
            self.port.into_into_dart().into_dart(),
            self.protocol.into_into_dart().into_dart(),
            self.download.into_into_dart().into_dart(),
            self.announcement.into_into_dart().into_dart(),
            self.announce.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::ServerConfig
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::ServerConfig>
    for crate::api::simple::ServerConfig
{
    fn into_into_dart(self) -> crate::api::simple::ServerConfig {
        self
    }
}
impl flutter_rust_bridge::IntoDart for crate::api::simple::ServerStatus {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            Self::Starting => 0,
            Self::Started => 1,
            Self::Stopping => 2,
            Self::Stopped => 3,
        }
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::ServerStatus
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::ServerStatus>
    for crate::api::simple::ServerStatus
{
    fn into_into_dart(self) -> crate::api::simple::ServerStatus {
        self
    }
}

impl SseEncode for String {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::simple::DeviceConfig {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.alias, serializer);
        <String>::sse_encode(self.fingerprint, serializer);
        <String>::sse_encode(self.device_model, serializer);
        <String>::sse_encode(self.device_type, serializer);
        <String>::sse_encode(self.store_path, serializer);
    }
}

impl SseEncode for crate::core::model::DeviceInfo {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.alias, serializer);
        <String>::sse_encode(self.version, serializer);
        <String>::sse_encode(self.device_model, serializer);
        <String>::sse_encode(self.device_type, serializer);
        <String>::sse_encode(self.fingerprint, serializer);
        <Option<String>>::sse_encode(self.address, serializer);
        <u16>::sse_encode(self.port, serializer);
        <String>::sse_encode(self.protocol, serializer);
        <bool>::sse_encode(self.download, serializer);
        <bool>::sse_encode(self.announcement, serializer);
        <bool>::sse_encode(self.announce, serializer);
    }
}

impl SseEncode for crate::api::simple::DiscoverState {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::simple::DiscoverState::Discovering(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<crate::core::model::DeviceInfo>>::sse_encode(field0, serializer);
            }
            crate::api::simple::DiscoverState::Done => {
                <i32>::sse_encode(1, serializer);
            }
        }
    }
}

impl SseEncode for i32 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for i64 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i64::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for Vec<crate::core::model::DeviceInfo> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::core::model::DeviceInfo>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for crate::api::simple::LogEntry {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i64>::sse_encode(self.time_millis, serializer);
        <i32>::sse_encode(self.level, serializer);
        <String>::sse_encode(self.tag, serializer);
        <String>::sse_encode(self.msg, serializer);
    }
}

impl SseEncode for Option<String> {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for crate::core::model::Progress {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::core::model::Progress::Prepare => {
                <i32>::sse_encode(0, serializer);
            }
            crate::core::model::Progress::Idle => {
                <i32>::sse_encode(1, serializer);
            }
            crate::core::model::Progress::Progress(field0, field1) => {
                <i32>::sse_encode(2, serializer);
                <usize>::sse_encode(field0, serializer);
                <usize>::sse_encode(field1, serializer);
            }
            crate::core::model::Progress::Done => {
                <i32>::sse_encode(3, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::simple::ServerConfig {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.multicast_addr, serializer);
        <u16>::sse_encode(self.port, serializer);
        <String>::sse_encode(self.protocol, serializer);
        <bool>::sse_encode(self.download, serializer);
        <bool>::sse_encode(self.announcement, serializer);
        <bool>::sse_encode(self.announce, serializer);
    }
}

impl SseEncode for crate::api::simple::ServerStatus {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self as _, serializer);
    }
}

impl SseEncode for u16 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for () {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "frb_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;
