// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.5.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::for_generated::wasm_bindgen;
use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: dart2rust

impl<T> CstDecode<Option<T>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
where
    JsValue: CstDecode<T>,
{
    fn cst_decode(self) -> Option<T> {
        (!self.is_null() && !self.is_undefined()).then(|| self.cst_decode())
    }
}
impl CstDecode<String> for String {
    fn cst_decode(self) -> String {
        self
    }
}
impl CstDecode<crate::api::model::FileInfo>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::api::model::FileInfo {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            6,
            "Expected 6 elements, got {}",
            self_.length()
        );
        crate::api::model::FileInfo {
            id: self_.get(0).cst_decode(),
            file_name: self_.get(1).cst_decode(),
            size: self_.get(2).cst_decode(),
            file_type: self_.get(3).cst_decode(),
            sha256: self_.get(4).cst_decode(),
            preview: self_.get(5).cst_decode(),
        }
    }
}
impl CstDecode<Vec<crate::api::model::FileInfo>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::api::model::FileInfo> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<crate::discovery::model::Node>>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> Vec<crate::discovery::model::Node> {
        self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap()
            .iter()
            .map(CstDecode::cst_decode)
            .collect()
    }
}
impl CstDecode<Vec<u8>> for Box<[u8]> {
    fn cst_decode(self) -> Vec<u8> {
        self.into_vec()
    }
}
impl CstDecode<crate::logger::LogEntry>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::logger::LogEntry {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            4,
            "Expected 4 elements, got {}",
            self_.length()
        );
        crate::logger::LogEntry {
            time_millis: self_.get(0).cst_decode(),
            level: self_.get(1).cst_decode(),
            tag: self_.get(2).cst_decode(),
            msg: self_.get(3).cst_decode(),
        }
    }
}
impl CstDecode<crate::bridge::bridge::MissionItem>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::bridge::bridge::MissionItem {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            2,
            "Expected 2 elements, got {}",
            self_.length()
        );
        crate::bridge::bridge::MissionItem {
            id: self_.get(0).cst_decode(),
            file_info: self_.get(1).cst_decode(),
        }
    }
}
impl CstDecode<crate::discovery::model::Node>
    for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue
{
    fn cst_decode(self) -> crate::discovery::model::Node {
        let self_ = self
            .dyn_into::<flutter_rust_bridge::for_generated::js_sys::Array>()
            .unwrap();
        assert_eq!(
            self_.length(),
            11,
            "Expected 11 elements, got {}",
            self_.length()
        );
        crate::discovery::model::Node {
            alias: self_.get(0).cst_decode(),
            version: self_.get(1).cst_decode(),
            device_model: self_.get(2).cst_decode(),
            device_type: self_.get(3).cst_decode(),
            fingerprint: self_.get(4).cst_decode(),
            address: self_.get(5).cst_decode(),
            port: self_.get(6).cst_decode(),
            protocol: self_.get(7).cst_decode(),
            download: self_.get(8).cst_decode(),
            announcement: self_.get(9).cst_decode(),
            announce: self_.get(10).cst_decode(),
        }
    }
}
impl CstDecode<Option<String>> for Option<String> {
    fn cst_decode(self) -> Option<String> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<Option<Vec<u8>>> for Option<Box<[u8]>> {
    fn cst_decode(self) -> Option<Vec<u8>> {
        self.map(CstDecode::cst_decode)
    }
}
impl CstDecode<String> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> String {
        self.as_string().expect("non-UTF-8 string, or not a string")
    }
}
impl CstDecode<bool> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> bool {
        self.is_truthy()
    }
}
impl CstDecode<i32> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i32 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<i64> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> i64 {
        ::std::convert::TryInto::try_into(
            self.dyn_into::<flutter_rust_bridge::for_generated::js_sys::BigInt>()
                .unwrap(),
        )
        .unwrap()
    }
}
impl CstDecode<Vec<u8>> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> Vec<u8> {
        self.unchecked_into::<flutter_rust_bridge::for_generated::js_sys::Uint8Array>()
            .to_vec()
            .into()
    }
}
impl CstDecode<u16> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u16 {
        self.unchecked_into_f64() as _
    }
}
impl CstDecode<u8> for flutter_rust_bridge::for_generated::wasm_bindgen::JsValue {
    fn cst_decode(self) -> u8 {
        self.unchecked_into_f64() as _
    }
}

#[wasm_bindgen]
pub fn dart_fn_deliver_output(
    call_id: i32,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    let message = unsafe {
        flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
            ptr_,
            rust_vec_len_,
            data_len_,
        )
    };
    FLUTTER_RUST_BRIDGE_HANDLER.dart_fn_handle_output(call_id, message)
}

#[wasm_bindgen]
pub fn wire_accept_mission(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    mission_id: String,
    accept: bool,
) {
    wire_accept_mission_impl(port_, mission_id, accept)
}

#[wasm_bindgen]
pub fn wire_create_log_stream(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_create_log_stream_impl(port_)
}

#[wasm_bindgen]
pub fn wire_discover(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_discover_impl(port_)
}

#[wasm_bindgen]
pub fn wire_mission_channel(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_mission_channel_impl(port_)
}

#[wasm_bindgen]
pub fn wire_node_channel(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_node_channel_impl(port_)
}

#[wasm_bindgen]
pub fn wire_rust_set_up(port_: flutter_rust_bridge::for_generated::MessagePort, is_debug: bool) {
    wire_rust_set_up_impl(port_, is_debug)
}

#[wasm_bindgen]
pub fn wire_setup(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_setup_impl(port_)
}

#[wasm_bindgen]
pub fn wire_start(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_start_impl(port_)
}

#[wasm_bindgen]
pub fn wire_stop(port_: flutter_rust_bridge::for_generated::MessagePort) {
    wire_stop_impl(port_)
}
